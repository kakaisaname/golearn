template包（html/template）实现了数据驱动的模板，用于生成可对抗代码注入的安全HTML输出。本包提供了和text/template包相同的接口，无论何时当输出是HTML的时候都应使用本包。

字段操作
Go语言的模板通过{{}}来包含需要在渲染时被替换的字段，{{.}}表示当前的对象。

<title>{{ .Title }}</title>

输出嵌套字段内容

那么如果字段里面还有对象，我们可以使用{{with …}}…{{end}}和{{range …}}{{end}}来进行数据的输出。

{{ range array }}
    {{ . }}
{{ end }}
1
2
3
{{range $index, $element := array}}
    {{ $index }}
    {{ $element }}
{{ end }}
1
2
3
4
条件处理

在Go模板里面如果需要进行条件判断，那么我们可以使用和Go语言的if-else语法类似的方式来处理。
if:

{{ if isset .Params "title" }}<h4>{{ index .Params "title" }}</h4>{{ end }}
1
if …else:

{{ if isset .Params "alt" }}
    {{ index .Params "alt" }}
{{else}}
    {{ index .Params "caption" }}
{{ end }}
1
2
3
4
5
and & or:

{{ if and (or (isset .Params "title") (isset .Params "caption")) (isset .Params "attr")}}
1
with:

{{ with .Params.title }}<h4>{{ . }}</h4>{{ end }}
1
支持pipe数据

{{. | html}}
1
{{ if isset .Params "caption" | or isset .Params "title" | or isset .Params "attr" }}
Stuff Here
{{ end }}
1
2
3
模板变量

{{with $x := "output" | printf "%q"}}{{$x}}{{end}}
1
局部变量的作用域在end前。

模板函数
……

func Must

func Must(t *Template, err error) *Template
1
模板包里面有一个函数Must，它的作用是检测模板是否正确，例如大括号是否匹配，注释是否正确的关闭，变量是否正确的书写.

通过文件名指定模板:

t := template.New("hello")
template.Must(t.ParseFiles("hello.txt"))
template.Must(t.ParseFiles("world.txt"))
t.ExecuteTemplate(os.Stdout, "world.txt", nil)


代码3：
从文件读取html模板，并且通过服务器访问。
首先写一个todos.html:

<h1>Todos</h1>
<ul>
    {{range .Todos}}
        {{if .Done}}
            <li><s>{{.Task}}</s></li>
        {{else}}
            <li>{{.Task}}</li>
        {{end}}
    {{end}}
</ul>

main.go:

package main

import (
    "html/template"
    "net/http"
)

type Todo struct {
    Task string
    Done bool
}

func main() {
    tmpl := template.Must(template.ParseFiles("todos.html"))
    todos := []Todo{
        {"Learn Go", true},
        {"Read Go Web Examples", true},
        {"Create a web app in Go", false},
    }

    http.HandleFunc("/", func(w http.ResponseWriter, r *http.Request) {
        tmpl.Execute(w, struct{ Todos []Todo }{todos})
    })

    http.ListenAndServe(":8080", nil)
}
通过浏览器输入：http://localhost:8080/
结果：
